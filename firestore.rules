rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Items must have a userId, a name, and an illustration field. Name is a string of length <100. Illustration is a string.
    // the vailidity of the userId is to be tested in another part of the rule.
    function itemFieldsAreValid()
    {
      return request.resource.data.keys().hasAll(['name', 'userId', 'illustration']) && request.resource.data.name is string && request.resource.data.name.size() < 100 && request.resource.data.illustration is string 
    }

    function categoryFieldsAreValid()
    {
      return request.resource.data.keys().hasAll(['title', 'userId', 'illustration','rank']) && request.resource.data.title is string && request.resource.data.title.size() < 100 && request.resource.data.illustration is string && request.resource.data.rank is number && request.resource.data.rank>=0
    }

    match /{document=**} {
      allow read, write: if false;
    }

    match /items/{itemId} {
      allow read: if (request.auth.uid != null && resource.data.userId == request.auth.uid);
      allow create: if (request.auth.uid != null && request.resource.data.userId == request.auth.uid && itemFieldsAreValid());
      allow update: if (request.auth.uid != null && resource.data.userId == request.auth.uid && itemFieldsAreValid());
    }

    match /categories/{categoryId} {
      allow read: if (request.auth.uid != null && resource.data.userId == request.auth.uid);
      allow create: if (request.auth.uid != null && request.resource.data.userId == request.auth.uid && categoryFieldsAreValid());
      allow update: if (request.auth.uid != null && resource.data.userId == request.auth.uid && categoryFieldsAreValid());
    }

    match /users/{userId} {
      allow write: if (request.auth.uid == userId);
    }
  }
}

